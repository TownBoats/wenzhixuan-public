1.理解ChatWindow组件
	- 判断传入的内容，如果是区分user和assistant的身份，区分css样式
	- 思考中的判断，如果思考中的话就不显示
	- 层层嵌套来进行功能上的添加
	- {isLoading&&...}表示如果isLoading为false，直接不用管后面的东西，档期为true的时候才渲染
2.理解UserInput组件
	- 从ChatPage传入inputtext、按钮方法、isLoading状态的等
	- 判断是否在思考、是否有文字，可以发送内容引起请求。
3.理解ContentParser.js
	- 构建一个解析器
	- 可以自定义tag，增删改查tag
	- 提取标签的功能是使用正则匹配，直接把所有的内容进行匹配
	- 问题：如果要实现流式输出，这样的方法一定不行，除非每个块输出都进行解析，但是这样的解析会造成大量的无用解析。
4.理解ChatPage.jsx
	- 设置一些状态值
	- 创建两个agent
	- 创建两个解析器
	- 定义一个markdown渲染器
	- 发送消息的函数handleSendMessage
		- 如果没有内容，则什么也不做
		- 如果有内容
			- 先设置加载中的变量为true-->界面显示思考中的动画
			- 把Response设置为空-Response和isloading是高度绑定的
			- 设置fullResponse，一边获取一边解析fullResponse
			- 解析完成后把所有的Response内容设置为message
如果要流式解析，应该是：解析一部分->设置Response为当前部分->解析完成后保存message（role：assistant）->显示问答->点击问答->更新message
